// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type ExampleServiceHTTPServer interface {
	TestValidate(context.Context, *Request) (*Respone, error)
}

func RegisterExampleServiceHTTPServer(s *http.Server, srv ExampleServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/validate", _ExampleService_TestValidate0_HTTP_Handler(srv))
}

func _ExampleService_TestValidate0_HTTP_Handler(srv ExampleServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.example.ExampleService/TestValidate")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestValidate(ctx, req.(*Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Respone)
		return ctx.Result(200, reply)
	}
}

type ExampleServiceHTTPClient interface {
	TestValidate(ctx context.Context, req *Request, opts ...http.CallOption) (rsp *Respone, err error)
}

type ExampleServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewExampleServiceHTTPClient(client *http.Client) ExampleServiceHTTPClient {
	return &ExampleServiceHTTPClientImpl{client}
}

func (c *ExampleServiceHTTPClientImpl) TestValidate(ctx context.Context, in *Request, opts ...http.CallOption) (*Respone, error) {
	var out Respone
	pattern := "/v1/validate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.example.ExampleService/TestValidate"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
