// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: validate/api/example.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Respone with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Respone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Message

	return nil
}

// ResponeValidationError is the validation error returned by Respone.Validate
// if the designated constraints aren't met.
type ResponeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponeValidationError) ErrorName() string { return "ResponeValidationError" }

// Error satisfies the builtin error interface
func (e ResponeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRespone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponeValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if val := m.GetAge(); val <= 0 || val >= 120 {
		return RequestValidationError{
			field:  "Age",
			reason: "value must be inside range (0, 120)",
		}
	}

	if _, ok := _Request_Code_InLookup[m.GetCode()]; !ok {
		return RequestValidationError{
			field:  "Code",
			reason: "value must be in list [1 2 3]",
		}
	}

	if _, ok := _Request_Score_NotInLookup[m.GetScore()]; ok {
		return RequestValidationError{
			field:  "Score",
			reason: "value must not be in list [0 99.99]",
		}
	}

	if m.GetState() != true {
		return RequestValidationError{
			field:  "State",
			reason: "value must equal true",
		}
	}

	if m.GetPath() != "/hello" {
		return RequestValidationError{
			field:  "Path",
			reason: "value must equal /hello",
		}
	}

	if utf8.RuneCountInString(m.GetPhone()) != 11 {
		return RequestValidationError{
			field:  "Phone",
			reason: "value length must be 11 runes",
		}

	}

	if utf8.RuneCountInString(m.GetExplain()) < 3 {
		return RequestValidationError{
			field:  "Explain",
			reason: "value length must be at least 3 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 10 {
		return RequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
	}

	if !_Request_Card_Pattern.MatchString(m.GetCard()) {
		return RequestValidationError{
			field:  "Card",
			reason: "value does not match regex pattern \"(?i)^[0-9a-f]+$\"",
		}
	}

	if m.GetInfo() == nil {
		return RequestValidationError{
			field:  "Info",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RequestValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

var _Request_Code_InLookup = map[uint32]struct{}{
	1: {},
	2: {},
	3: {},
}

var _Request_Score_NotInLookup = map[float32]struct{}{
	0:     {},
	99.99: {},
}

var _Request_Card_Pattern = regexp.MustCompile("(?i)^[0-9a-f]+$")

// Validate checks the field values on Info with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Info) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	return nil
}

// InfoValidationError is the validation error returned by Info.Validate if the
// designated constraints aren't met.
type InfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InfoValidationError) ErrorName() string { return "InfoValidationError" }

// Error satisfies the builtin error interface
func (e InfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InfoValidationError{}
